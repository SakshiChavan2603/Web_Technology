//Using class Component Assignment 3


import React, { Component } from 'react';

class TextTransformerClass extends Component {
  constructor(props) {
    super(props);
    this.state = {
      inputText: '',
      transformType: 'none' // Default to no transformation
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleRadioChange = this.handleRadioChange.bind(this);
  }

  // Handle changes in the text input field
  handleChange(event) {
    this.setState({ inputText: event.target.value });
  }

  // Handle changes in the radio buttons
  handleRadioChange(event) {
    this.setState({ transformType: event.target.value });
  }

  // Logic to apply the selected text transformation
  getTransformedText() {
    const { inputText, transformType } = this.state;

    switch (transformType) {
      case 'uppercase':
        return inputText.toUpperCase();
      case 'lowercase':
        return inputText.toLowerCase();
      case 'titlecase':
        // Title Case logic: capitalize the first letter of each word
        return inputText
          .toLowerCase()
          .split(' ')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');
      default:
        return inputText;
    }
  }

  render() {
    const transformedText = this.getTransformedText();

    return (
      <div style={{ padding: '20px', border: '1px solid #ccc' }}>
        <h2>Class Component Text Transformer</h2>

        {/* Input Text Field */}
        <label htmlFor="text-input-class">Enter Text:</label>
        <input
          id="text-input-class"
          type="text"
          value={this.state.inputText}
          onChange={this.handleChange}
          placeholder="Type something here..."
          style={{ width: '100%', padding: '8px', margin: '10px 0' }}
        />

        {/* Radio Buttons for Transformation */}
        <div style={{ marginBottom: '15px' }}>
          <label style={{ marginRight: '15px' }}>
            <input
              type="radio"
              value="uppercase"
              checked={this.state.transformType === 'uppercase'}
              onChange={this.handleRadioChange}
            />
            Uppercase
          </label>
          <label style={{ marginRight: '15px' }}>
            <input
              type="radio"
              value="lowercase"
              checked={this.state.transformType === 'lowercase'}
              onChange={this.handleRadioChange}
            />
            Lowercase
          </label>
          <label style={{ marginRight: '15px' }}>
            <input
              type="radio"
              value="titlecase"
              checked={this.state.transformType === 'titlecase'}
              onChange={this.handleRadioChange}
            />
            Title Case
          </label>
        </div>

        {/* Display Output */}
        <div style={{ border: '1px solid green', padding: '10px', backgroundColor: '#e6ffe6' }}>
          <strong>Transformed Output:</strong>
          <p>{transformedText}</p>
        </div>
      </div>
    );
  }
}

// export default TextTransformerClass; // Uncomment in a real project



// assignment 4
import React, { useState } from 'react';

// --- Nested Components for Conditional Rendering ---

// 1. Component for Graduate Details
const GraduateDetails = () => {
  const [gradDetails, setGradDetails] = useState({
    degree: '',
    year: '',
    finalYearScore: '',
    university: '',
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setGradDetails(prev => ({ ...prev, [name]: value }));
  };

  const inputStyle = "p-2 border border-blue-200 rounded-lg w-full focus:ring-2 focus:ring-blue-400 transition duration-150";

  return (
    <div className="p-4 bg-blue-50 border border-blue-200 rounded-xl shadow-inner mt-4">
      <h3 className="text-xl font-semibold text-blue-800 mb-3">Graduate Details</h3>
      <div className="space-y-3">
        <input
          name="degree"
          type="text"
          placeholder="Degree Name (e.g., B.Tech)"
          value={gradDetails.degree}
          onChange={handleInputChange}
          className={inputStyle}
        />
        <input
          name="year"
          type="number"
          placeholder="Graduation Year"
          value={gradDetails.year}
          onChange={handleInputChange}
          className={inputStyle}
        />
        <input
          name="finalYearScore"
          type="text"
          placeholder="Final Year Score/GPA"
          value={gradDetails.finalYearScore}
          onChange={handleInputChange}
          className={inputStyle}
        />
        <input
          name="university"
          type="text"
          placeholder="University Name"
          value={gradDetails.university}
          onChange={handleInputChange}
          className={inputStyle}
        />
      </div>
    </div>
  );
};

// 2. Component for PG Details
const PGDetails = () => {
  const [pgDetails, setPgDetails] = useState({
    year: '',
    thesisSubject: '',
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setPgDetails(prev => ({ ...prev, [name]: value }));
  };

  const inputStyle = "p-2 border border-purple-200 rounded-lg w-full focus:ring-2 focus:ring-purple-400 transition duration-150";

  return (
    <div className="p-4 bg-purple-50 border border-purple-200 rounded-xl shadow-inner mt-4">
      <h3 className="text-xl font-semibold text-purple-800 mb-3">Post-Graduate (PG) Details</h3>
      <div className="space-y-3">
        <input
          name="year"
          type="number"
          placeholder="PG Completion Year"
          value={pgDetails.year}
          onChange={handleInputChange}
          className={inputStyle}
        />
        <input
          name="thesisSubject"
          type="text"
          placeholder="Thesis/Dissertation Subject"
          value={pgDetails.thesisSubject}
          onChange={handleInputChange}
          className={inputStyle}
        />
      </div>
    </div>
  );
};

// 3. Component for UnderGrad Details (High School/Secondary Education)
const UndergradDetails = () => {
  const [ugDetails, setUgDetails] = useState({
    sscScore: '',
    hscScore: '',
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUgDetails(prev => ({ ...prev, [name]: value }));
  };

  const inputStyle = "p-2 border border-green-200 rounded-lg w-full focus:ring-2 focus:ring-green-400 transition duration-150";

  return (
    <div className="p-4 bg-green-50 border border-green-200 rounded-xl shadow-inner mt-4">
      <h3 className="text-xl font-semibold text-green-800 mb-3">Undergraduate/High School Details</h3>
      <div className="space-y-3">
        <input
          name="sscScore"
          type="text"
          placeholder="SSC (10th Grade) Score/Percentage"
          value={ugDetails.sscScore}
          onChange={handleInputChange}
          className={inputStyle}
        />
        <input
          name="hscScore"
          type="text"
          placeholder="HSC (12th Grade) Score/Percentage"
          value={ugDetails.hscScore}
          onChange={handleInputChange}
          className={inputStyle}
        />
      </div>
    </div>
  );
};


// --- Main Application Component (App) ---

const App = () => {
  // State for basic user info
  const [userName, setUserName] = useState('');
  const [userEmail, setUserEmail] = useState('');
  // State for dropdown selection
  const [qualification, setQualification] = useState('');

  // Function to conditionally render the relevant component
  const renderDetailsComponent = () => {
    switch (qualification) {
      case 'Graduate':
        return <GraduateDetails />;
      case 'PG':
        return <PGDetails />;
      case 'UnderGrad':
        return <UndergradDetails />;
      default:
        return (
          <div className="mt-4 p-4 text-center text-gray-500 bg-gray-100 rounded-xl">
            Please select a qualification type to enter detailed information.
          </div>
        );
    }
  };

  // Common input field style
  const inputStyle = "p-3 border border-gray-300 rounded-xl w-full focus:ring-4 focus:ring-indigo-300 transition duration-200 shadow-sm";

  return (
    <div className="min-h-screen bg-gray-50 flex items-start justify-center p-4 sm:p-8">
      <div className="w-full max-w-2xl bg-white p-6 sm:p-10 rounded-3xl shadow-2xl">
        <h1 className="text-4xl font-extrabold text-indigo-700 mb-6 text-center">
          User Educational Details Form
        </h1>
        <form className="space-y-6">
          {/* 1. Basic Details */}
          <div className="space-y-4">
            <label className="block text-lg font-medium text-gray-700">Name</label>
            <input
              type="text"
              placeholder="Full Name"
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
              className={inputStyle}
            />
          </div>

          <div className="space-y-4">
            <label className="block text-lg font-medium text-gray-700">Email</label>
            <input
              type="email"
              placeholder="example@domain.com"
              value={userEmail}
              onChange={(e) => setUserEmail(e.target.value)}
              className={inputStyle}
            />
          </div>

          {/* 2. Qualification Dropdown */}
          <div className="space-y-4">
            <label htmlFor="qualification-select" className="block text-lg font-medium text-gray-700">
              Select Qualification Level
            </label>
            <div className="relative">
              <select
                id="qualification-select"
                value={qualification}
                onChange={(e) => setQualification(e.target.value)}
                className={`${inputStyle} appearance-none bg-white pr-10`}
              >
                <option value="" disabled>-- Choose Qualification --</option>
                <option value="Graduate">Graduate</option>
                <option value="PG">Post-Graduate (PG)</option>
                <option value="UnderGrad">Undergraduate/High School (UnderGrad)</option>
              </select>
              <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                  <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                </svg>
              </div>
            </div>
          </div>

          {/* 3. Conditional Rendering Area */}
          {renderDetailsComponent()}
        </form>
        
        {/* Output Summary for demonstration */}
        <div className="mt-8 pt-6 border-t border-gray-200">
            <h3 className="text-2xl font-bold text-gray-800 mb-3">Current Data Summary</h3>
            <p className="text-gray-600"><strong>Name:</strong> {userName || 'N/A'}</p>
            <p className="text-gray-600"><strong>Email:</strong> {userEmail || 'N/A'}</p>
            <p className="text-gray-600"><strong>Qualification:</strong> {qualification || 'None Selected'}</p>
            <p className="text-sm italic text-gray-400 mt-2">
                (Qualification specific details are held locally within the conditionally rendered component.)
            </p>
        </div>
      </div>
    </div>
  );
};

export default App;
